1.   Android
2.   data
3.   tv.danmaku.bili
4.   download

GKB是java编译语言

coral

Ciallo～(∠・ω< )⌒★
手机壳背景色
#3A6DA4
58 109 164

AE快捷键
Y锚点平移工具
A P S R T  U 中心点、位置、缩放、旋转、透明度、显示关键帧
ctrl + u 调出合成控制
B 和 N 出点和入点
ctrl+shift+D 裁剪并分层
Alt + {  / +}  左侧裁剪至此 / 右侧裁剪至此
{  /  }  该层素材左/右侧对其光标
在两个关键帧中间可以点左边加一个关键帧来暂时停顿物体
Alt+选中关键帧  拖动比例
动画里面的关键帧辅助有反向关键帧。
在属性中选中对象直接按对应属性的快捷键就只会打开相应的属性
J 和 K 移动到上/下一个关键帧

pr
ctrl+shift+x删除出入点
shift+E 开启

MySQL code:123456
去人声的解压码：ykch


pr文字格式 Essential Graphics     Essential Panel Files



启动MySQL要到service里面自己启动或者关闭

smart tomcat deployment directory D:/what down/java/Int/untitled1/src/main/webapp

苍绿色 #39C5BB rgb(57, 197, 187)

7p

import javax.servlet.http.HttpServlet;专门用于javaweb的包





首先，最重要的东西，补丁。
下载后在根目录运行程序即可
方向键移动，Z键 互动/确定 X键打开菜单 可以存档、升级技能、佩戴护身符、开启战斗加速功能（必开，不然有你好受的） F4切换窗口大小，F11全屏


1.你不获得相应的技能是打不过剧情BOOS的，直接GG。所以要尽早的把每个技能拿到，然后尽量升到最高级。

2.护身符，会提供特殊的效果、加成属于早做早好受的玩意儿，能让你少受一些折磨。女主角的毛发是制作最强的护身符的材料。 游戏的数值设计都是刚刚好的程度，没有护符，很难打过最终BOOS。 毛拿的次数有限，在错误的时机拿，会被发现、没收。到了决战没凑齐6根，那么恭喜你，要么得攒13万买，要么就下周目见了。剧情上每过一天在卧室刷新，还有一次是在地牢拿，最好13根全拿完， 所以一定要多存档。

3.回复药可以回复HP和行动值，但是喝下回复药消耗的行动值也不少，不如多A几下或者用技能，成本还高。如果你技能等级不过关，除非运气好基本上寄了。只能说是属于锦上添花或者用于应急的玩意。

4.女主跟随时，菜单能进商店，而且带回城功能.女主在家、跟随时不能去拿毛，继续推图，到了特定的地方女主会留下来做研究，这时候回去拿。

5.关于刷级，前期不要管一二级的植物怪，碰到直接开润，除非被围了，打不到你的。直接跑图做剧情和拿技能，拿了破防后，然后刷一些花妖升技能。打精灵，打完以后在环水的花坛那里刷精灵，打完精灵后过剧情，开启左方前往黑森林的路，路上有一个向上的岔路口，门口标牌写着护符店，在这里就可以做护符了，每种只能带一个，多做浪费材料，这里就可以做一个加50%经验加成的护符。然后防御和平A升到四级左右，就可以刷水精灵了，一次500经验，打几次就可以换一个回血的护符，剩下的头发都卖钱。再往后带满三个加经验的护符，强力攻击升满无脑刷暗精灵，一次3000经验，基本上能把技能都升满。

6.BOOS和隐藏怪的触发方式
精灵是要把环水花坛处的除树桩以外的妖精一种捉一只，一共四种，然后回到第二个回血屋上方的花丛触发
暗精灵要把森林内的一个基座放上蜡烛，重进地图触发
蘑菇王，在蘑菇森林内和大蘑菇换蘑菇三次触发，并且给三个技能，兑换一次给一个。
毒蘑菇，蘑菇王的孢子对三种植物精灵之一使用转化而来
蜡烛头在吸血鬼城堡门口的小屋里面，此外城堡内右后方的房间内有宝箱怪
封印的魔导书：和ass书战斗使用钳子即可，很强。
盗贼首领在家门口进黑森林往左的一个陷阱箱小道里
吸血鬼需要在女主跟随的情况下，带领女主到达洋馆左侧的图书馆，在女主留下研究后，来到右侧类似于餐厅的房间触发。
BOOS在捕捉之前都会刷新

7.这游戏精灵球有三级，不同的怪要求的等级不同，BOOS基本上用三级球抓，你要是有什么实在抓不到的，做剧情直到拿三级球，再回去抓。当然，你要是能打过女主，通关后也可以慢慢抓。

8.技能获取
防御，第一张森林图左下方的箱子内，有一个二级植物怪守着。

快攻，在获得防御处向右走到达一片空地，沿着上面的小路一直走，直到地图最右方，可见一个花妖守着箱子。注意触发战斗后无法逃跑，但是花妖很菜，半血平A都打得过。

反击，开启黑森林图后，护符店向右，进入下一张地图后回血屋继续向右，可见一处向上的小路，触发4+1的车轮战，战胜前四个杂鱼后在箱子内获得。boos则建议防御技能升级到防御力25及以上，以及快攻三级及以上。

三连击，击败盗贼首领获得钥匙后，在黑森林地图上方，充满史莱姆的山洞内，在箱子中获得。该技能用于处理挡路的树桩，在合适的时机也可用于输出。

平静，回血，在森林图过桥后的一片空地的下方，击败挡路树桩怪在箱子内获得。需要三连击技能。

忍耐，在花坛地图的上方有一片存在多个蜜蜂的花田处的箱子内获得。

破防技能，无视防御造成伤害。随着剧情发展，在环水花坛左侧的破房子的箱子内获得。该技能及其上位版本无法被反击。

强力攻击，在蘑菇林的左上方箱子内获得。带一定防御的攻击技能，打小怪很好用。

轻微防御、强力防御、破防-改，在蘑菇王处换取技能石，使用后获得，需要注意的是第三次换取会触发BOOS战，蘑菇王很强，属于后期BOOS。

六连击，在图书馆遭遇女主后，向右方走到下一张地图，再沿着下方走廊向右逆时针绕一圈即可在箱子内获得。

部分凭借记忆撰写，欢迎各位补充和指正


=======================================================================


以下回答一些回复的疑问。

蜡烛在吸血鬼洋馆门口的小屋，有两个，一个用于触发暗精灵boos，一个用于开启洋馆右边的路，按Z背起。

一些可能会忽略的怪：
长发魔导书，在正太门口的地图刷新
巨大宝箱，十字坟必出
暗黑魔导书、油灯，在拿取炼金术Ⅳ书的房间内

此外史莱姆是无法捕捉的，但是通关后地下室可以与其战斗。

图书馆通过在地下室二层地上的书进入

开锁的书在获得六连击技能的横向走廊，从左往右数第二排书架的从右往左数第二个书架上。
炼金术的书和女主对话和去左上方的房间内获得。

汉化翻译有误，女主毛做的护符6根毛的为小护符，13根毛为大护符，此外击败最终boos通关后，在boos战场景后方走到尽头，可遇见护符商人，免费赠送13根毛。

最后，说一下最终BOOS战的推荐配置

防御护符，防御+2【+4】
吸血鬼护符,攻击+3【+6】
大蘑菇护符，HP增加50%【100%】
水精灵护符，每各异的时间恢复HP2点【4点】
魔法师(大)护符，所有护符效果翻倍
在房子左边第二排的空罐子连续按空格10下，可获得99999经验、999高阶胶囊，和作弊技能。











一下所有<>都是中文代之不写入代码
git 
mkdir <项目名> 创建项目
cat <文件名.后缀> 查看文件内容
git reflog 查看操作的历史记录/log
git ls-files 查看暂存区内容 
echo <内容> > <文件名.后缀> 创建新文件
git config命令配置用户名和邮箱
git log 查看提交记录  / git log --oneline 查看简洁的提交记录
ls -a 查看文件夹中的所有文件
 git init /git clone 创建本地仓库
git status 查看仓库状态
git add <文件名>添加到暂存区 git add . 是全部文件
git commit -m 提交暂存区中的文件
alias <别名>="命令原名" 从新命名命令
配置ssh
:wq 退出编辑模式


git reset 回退版本
git reset --soft 不丢弃工作区和暂存区的内容
git reset --hard 丢弃工作区和暂存区的内容
git reset --mixed 只保留工作区

Rebase 变基 在任意分支上合并分支，直接搬家
git rebase <branch-name>
eq git switch dev
     git rebase main//把dev分支移植到main上


git diff 查看差异(工作区(默认)、暂存区(默认)、本地仓库、不同版本、不同分支)
git diff HEAD 仓库
git diff --cached 暂存区和版本库之间
git diff <提交ID> <提交ID> 查看两个版本之间的差异内容
HEAD表示当前版本
git diff HEAD~/HEAS^(表示上一个版本)  (可以加数字表示之前的某个版本)HEAD 比较上一个和当前版本的不同

rm <文件名.后缀> 删除文件  // rm 本因是Linux的命令但是我也可以用，最好直接找到他然后删除
这个只是删除了文件但是暂存区的没有被删除 可以在add它一次
git rm <文件名.后缀> 暂存库也会删掉
但是还是要提交不然版本库中依然存在
git rm -r* 删除某个目录下的搜友子目录和文件
git remote rm <仓库名>

checkout 撤销修改or切换分支(默认):如果恢复文件时，分支名和文件名相同，则会默认切换分支
git checkout . 放弃工作区全部修改
git checkout --<filename> 撤销某个file的修改
git checkout -f 放弃缓存区和工作区的修改
git branch 查看分支
git branch -r 查看远程分支
git branch -a 查看所有分支 
git checkout <分支名> 切换分支 
git switch <分支名> 专门用于切换分支的
git branch newbranch 创建分支
合并 git checkout -b <分支名> -b就是branch缩写
git branch --merged 列出以合并在主分支的分支，要先切换到main，查看已经合并到当前分支的分支
git merge <要合并的分支名> 合并分支到当前分支
git log --graph --oneline --decorate --all 查看分支图
git branch -d <分支名>删除一个已经合并的分支
git branch -D <分支名>强制删除一个没有合并的分支
git checkout -b <分支别名> <远程仓库/远程分支>
git分支的最佳实现：为了保证分支管理的顺畅和有效，就需要制定明确的分支管理流程和规范，同时加强分支的保护和权限控制避免常见的分支管理错误

git tag <标签名> 
git tag -a <标签名> -m "标签信息" <提交ID>//git tag -a v1.0 -m "Release versin 1.0" HEAD
git tag 查看标签 git show <标签名> 查看具体标签
git push <origin远程仓库名> <标签名> 将tag推送到远程仓库 
git tag -d <标签名> 删除tag

.gitignore文件
echo <要忽略的文件.后缀> .gitignore 把文件名放入新生成的gitignore文件
*.后缀名 忽略全部相同文件

连接远程仓库
https://github.com/Lito33/first-repo.git 这个是创建远程仓库时的url地址
git@github.com:Lito33/first-repo.git 这个要用这个 这个要设置ssh密钥上面那个已经不用了
git remote add <shortname别名> <url> 添加一个远程仓库
git remote -v 查看当前仓库对应的远程仓库的别名和地址
git branch -M main 指定远程仓库的名称为main
git branch -m master main
 //not a valid object name: 'main' 需要commit 刷新一下
git push -u <origin(远程仓库)> <main(本地仓库)> 把着两个仓库连接起来,然后推送
git push -u <origin(远程仓库)> <main(本地仓库)>:<main> 把名为main的分支推送到 main 
git push <远程仓库名> <的那个分支> 要推送到那个远程仓库的那个分支
git push <origin> <main>:<develop远程仓库中名为develop的分支>
git push origin <指定分支名> -f 强制让本地分支覆盖远程分支
git remote set-url origin <url> 修改远程仓库地址
同样，如果我们在远程仓库修改了一些内容，则用pull来吧远程仓库的修改拉取到本地
更新代码
git pull <远程仓库名> <远程分支名>:<本地分支名>(这个可省略就变为默认eq: git pull)
执行git pull 后git会自动执行一次合并操作
git fetch 也可以获取远程仓库的修改，但不会合并到本地仓库中，就要手动合并
git push :直接push目前所在的分支到远程的main分支
git push --set-upstream <远程仓库名> <本地分支>//设置关联分支


git pull <远程主机名> <远程分支名>:<本地分支名>
git pull origin next:main//要取回origin主机的next分支，与本地的main分支合并
git pull origin next //远程分支next 要与当前分支合并

如果git merge合并的时候出现refusing to merge unrelated histories的错误，原因是两个仓库不同而导致的，需要在后面加上--allow-unrelated-histories进行允许合并，即可解决问题

解决合并冲突：
两个分支修改了同一个文件的同一个代码。
eq:
git branch feat(feature的缩写，表示某个功能的分支)
git switch feat
vi main1.txt//修改main1中的内容
git commit -a -m "feat:1"//提交
gie switch main
cat mian1.txt
vi main1.txt
git commit -am "main:6"
//出现分歧，尝试合并分支
git merge feat
//提示冲突
git diff //查看冲突的具体内容
 vi main1.txt//修改内容，把两行放在同一行
git add .
git commit -m "merge conflict"
//提交之后自动合并

工作流模型 GitFlow
主线分支/基线分支(mian/master)
问题修复分支，用于修复线上的问题，一般是从主线分支中分离出来的然后合并，更新小版本号
开发分支：包含项目最新开发代码，用于开发和测试，也是核心分支
功能分支：用于开发新的功能，开发分支分离出来的
预发布分支：包含最新预发布版本的代码，用于发布前的测试和验证，一般从开发分支分离出来

failed to push some refs to 'github.com:xy5225/software1.git'遇到这种错误
需要 git pull --rebase <远程仓库名> <本地仓库名>合并一下就能push了

push到他人的远程仓库
//添加仓库
git remote add origin <仓库地址>
//强制push本地master分支到远端的master分支
git push origin master:master -f

如何将develop分支的commitID复制到当前分支
先通过git checkout切换到有需要用到它commit的分支上，通过git reflog查看commit信息，复制对应的commitId。然后再通过git checkout切换回当前分支上，根据git cherry-pick <commitID>，将之前复制的commitId粘贴过来，回车，然后push就可以将分支上的commit提交到远程分支上了（如果push不了就设置upstream）。

git fetch：这将更新git remote 中所有的远程仓库所包含分支的最新commit-id, 将其记录到.git/FETCH_HEAD文件中
可以认为git pull是git fetch和git merge两个步骤的结合。

版本递升的规范？
dev及release版本号命名规则 - <主版本号>.<副版本号>.<发布号>
主版本号设置规则
产品的主体构件进行重大修改，主版本号加1
产品的主体构件之间的接口协议重大修改，主版本号加1

副版本号设置规则
主版本号变更时，副版本号置0
数据结构变更(新增或修改注释含义的情况除外)，副版本号加1
若副版本号累加至超过90时，采用主版本号进位制，主版本号加1，副版本号重新置0
发布号设置规则
主版本号或副版本号变更时，发布号置0
若发布的版本无数据结构变更，则发布号加1

hotfix版本号命名规则 - <主版本号>.<副版本号>.<发布号>
hotfix由于即修即删，因此同release版本的版本号即可
Unable to create 'D:/what down/GitHub/Git/location/test/.git/index.lock': File exists. 出现这个error时，把index.lock删了就行
cd 切换路径

git remote        # 列出所有远程主机
git remote update origin --prune   # 更新远程主机origin 整理分支
git branch -r      # 列出远程分支
// git branch -vv     # 查看本地分支和远程分支对应关系
// git checkout -b gpf origin/gpf    # 新建本地分支gpf与远程gpf分支相关联
